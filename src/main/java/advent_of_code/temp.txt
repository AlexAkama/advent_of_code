public class Day9 {
    private static final String DATA = "/data.txt";
    private static final String TEST = "/test.txt";

    private static final StringBuilder SB = new StringBuilder();

    private static boolean flag = true;
    private static int id = 0;

    private static String resource;
    private static int[] flat;

    public static void main(String[] args) {
        init();
        part1();
    }

    private static void part1() {
        flatString();
        compress();
        System.out.println(calculate());
    }

    private static BigInteger calculate() {
        BigInteger sum = BigInteger.ZERO;
        for (int i = 1; i < SB.length(); i++) {
            sum = sum.add(BigInteger.valueOf((SB.charAt(i) - '0') * i));
        }
        return sum;
    }

    private static void compress() {
        int nexEmptyPosition = findNexEmptyPosition(-1);
        for (int i = SB.length() - 1; i > nexEmptyPosition; i--) {
            if (SB.charAt(i) != '.') {
                SB.setCharAt(nexEmptyPosition, SB.charAt(i));
                nexEmptyPosition = findNexEmptyPosition(nexEmptyPosition);
            }
            SB.deleteCharAt(i);
            if (nexEmptyPosition == -1) return;
        }
    }

    private static int findNexEmptyPosition(int prevIndex) {
        return SB.indexOf(".", prevIndex + 1);
    }

    private static void flatString() {
        char[] chars = resource.toCharArray();
        for (char c : chars) {
            String element = flag ? String.valueOf(id) : ".";
            SB.append(element.repeat((c - '0')));
            if (flag) id++;
            flag = !flag;
        }
        id--;
        flag = !flag;
    }

    private static void init() {
        File file = new File(TEST);
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(file);
            try (BufferedReader reader = new BufferedReader(fileReader)) {
                resource = reader.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}





public class Day9v2 {
    private static final String DATA = "/data.txt";
    private static final String TEST = "/test.txt";

    private static String resource;
    private static List<Integer> flat = new ArrayList<>();

    public static void main(String[] args) {
        init();
        part2();
    }

    private static void part1() {
        flatString();
        compress();
        System.out.println(calculate());
    }

    private static void part2() {
        flatString();
        compressP2();
        System.out.println(calculate());
    }

    private static void compressP2() {
        int finishBlockIndex = flat.size() - 1;
        int blockSize = getDataBlockSize(finishBlockIndex);
        int startBlockIndex = finishBlockIndex - blockSize + 1;
        while (startBlockIndex > -1 && finishBlockIndex > -1) {
            blockSize = getDataBlockSize(finishBlockIndex);
            startBlockIndex = finishBlockIndex - blockSize + 1;
            int insertIndex = findNexEmptyPositionByBlockSize(blockSize);
            if (insertIndex > -1 && insertIndex < startBlockIndex) {
                moveBlock(insertIndex, startBlockIndex, blockSize);
            }
            finishBlockIndex = startBlockIndex - 1;
            while (finishBlockIndex > -1 && flat.get(finishBlockIndex) == -1) {
                finishBlockIndex--;
            }
        }

    }

    private static void moveBlock(int insertIndex, int startBlockIndex, int dataBlockSize) {
        for (int i = 0; i < dataBlockSize; i++) {
            flat.set(insertIndex + i, flat.get(startBlockIndex + i));
            flat.set(startBlockIndex + i, -1);
        }
    }

    private static int findNexEmptyPositionByBlockSize(int dataBlockSize) {
        int index = findNexEmptyPosition(0);
        while (index > 0) {
            int count = 0;
            while (index + count < flat.size() && flat.get(index + count) == -1 && count < dataBlockSize) {
                count++;
            }
            if (count == dataBlockSize) {
                return index;
            }
            index = findNexEmptyPosition(index);
        }
        return -1;
    }

    private static int getDataBlockSize(int index) {
        int v = flat.get(index);
        int count = 0;
        while (index - count > -1 && v == flat.get(index - count)) count++;
        return count;
    }


    private static long calculate() {
        long sum = 0;
        for (int i = 0; i < flat.size(); i++) {
            Integer id = flat.get(i);
            if (id != -1) {
                sum += id * i;
            }
        }
        return sum;
    }

    private static void compress() {
        int index = findNexEmptyPosition(0);
        for (int i = flat.size() - 1; i > -1; i--) {
            if (flat.get(i) != -1) {
                flat.set(index, flat.get(i));
                index = findNexEmptyPosition(index);
            }
            flat.remove(i);
            if (index == -1) return;
        }
    }

    private static int findNexEmptyPosition(int startIndex) {
        int index = startIndex + 1;
        while (index < flat.size()) {
            if (flat.get(index) == -1) {
                return index;
            }
            index++;
        }
        return -1;
    }

    private static void flatString() {
        char[] chars = resource.toCharArray();
        int id = 0;
        for (int i = 0; i < chars.length; i++) {
            char ch = chars[i];
            int dx = ch - '0';
            boolean isEven = i % 2 == 0;
            int element = isEven ? id : -1;
            for (int k = 0; k < dx; k++) {
                flat.add(element);
            }
            if (isEven) id++;
        }
    }

    private static void init() {
        File file = new File(DATA);
        try {
            FileReader fileReader = new FileReader(file);
            try (BufferedReader reader = new BufferedReader(fileReader)) {
                resource = reader.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

// DAY 10

public class Day10 {
    private static final String DATA = "/data.txt";
    private static final String TEST = "/test.txt";

    private static final List<Point> starts = new ArrayList<>();

    private static int[][] grid;
    private static int[] scores;

    public static void main(String[] args) {
        init();
        int res = part2();
        System.out.println(res);
    }

    private static int part1() {
        for (int i = 0; i < starts.size(); i++) {
            scores[i] = getPointScores(starts.get(i));
        }
        return calculateScore();
    }

    private static int part2() {
        for (int i = 0; i < starts.size(); i++) {
            scores[i] = getPathScores(starts.get(i));
        }
        return calculateScore();
    }

    private static int getPointScores(Point point) {
        Deque<Point> q = new ArrayDeque<>();
        q.addLast(point);
        Set<Point> visited = new HashSet<>();
        while (!q.isEmpty()) {
            Point p = q.removeFirst();
            int pl = grid[p.y][p.x];
            if (pl < 9) {
                for (Direction d : Direction.values()) {
                    Point next = new Point(p.y + d.dy, p.x + d.dx);
                    if (inGrid(next) && grid[next.y][next.x] - pl == 1) {
                        q.addLast(next);
                    }
                }
            } else {
                visited.add(p);
            }
        }
        return visited.size();
    }

    private static int getPathScores(Point point) {
        Deque<Point> q = new ArrayDeque<>();
        q.addLast(point);
        int score = 0;
        while (!q.isEmpty()) {
            Point p = q.removeFirst();
            int pl = grid[p.y][p.x];
            if (pl < 9) {
                for (Direction d : Direction.values()) {
                    Point next = new Point(p.y + d.dy, p.x + d.dx);
                    if (inGrid(next) && grid[next.y][next.x] - pl == 1) {
                        q.addLast(next);
                    }
                }
            } else {
                score++;
            }
        }
        return score;
    }

    private static int calculateScore() {
        int res = 0;
        for (int score : scores) {
            res += score;
        }
        return res;
    }

    private static void init() {
        File file = new File(DATA);
        try {
            List<String> strings = Files.readAllLines(file.toPath());
            grid = new int[strings.size()][strings.get(0).length()];
            for (int y = 0; y < strings.size(); y++) {
                char[] chars = strings.get(y).toCharArray();
                for (int x = 0; x < chars.length; x++) {
                    grid[y][x] = chars[x] - '0';
                    if (grid[y][x] == 0) {
                        starts.add(new Point(y, x));
                    }
                }
            }
            scores = new int[starts.size()];
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean inGrid(Point p) {
        return inMatrix(p.y, p.x, grid);
    }

    private static boolean inMatrix(int y, int x, int[][] matrix) {
        return y >= 0 && y < matrix.length && x >= 0 && x < matrix[y].length;
    }

    static class Point {
        int x;
        int y;

        public Point(int y, int x) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return String.format("[%d,%d]", y, x);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Point point = (Point) o;
            return x == point.x && y == point.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }

    public enum Direction {
        UP(-1, 0),
        DOWN(1, 0),
        LEFT(0, -1),
        RIGHT(0, 1);

        final int dy;
        final int dx;

        Direction(int dy, int dx) {
            this.dy = dy;
            this.dx = dx;
        }
    }


}


// DAY 11

public class Day11 {

    private static final String DATA = "/data.txt";
    private static final String TEST = "/test.txt";

    private static final int DEEP = 25;

    private static String data;
    private static List<String> list;

    public static void main(String[] args) {
        init();
        buildList();
        int res = part1();
        System.out.println(res);
    }

    private static int part1() {
        int res = 0;
        for (String s : list) {
             res += calculateStones(s);
        }
        return res;
    }

    private static int calculateStones(String element) {
        return calculateFromElement(element);
    }

    private static int calculateFromElement(String element) {
        list = List.of(element);
        for (int i = 1; i <= DEEP; i++) {
            updateList();
        }
        return list.size();
    }

    private static void updateList() {
        List<String> currentList = new ArrayList<>(list);
        ArrayList<String> nextList = new ArrayList<>();
        for (String element : currentList) {
            updateList(element, nextList);
        }
        list = nextList;
    }

    private static void updateList(String element, List<String> list) {
        if ("0".equals(element)) {
            list.add("1");
        } else if (element.length() % 2 == 0) {
            String s1 = element.substring(0, element.length() / 2);
            String s2 = element.substring(element.length() / 2);
            list.add("" + Long.parseLong(s1));
            list.add("" + Long.parseLong(s2));
        } else {
            long value = Long.parseLong(element);
            list.add("" + value * 2024L);
        }
    }

    private static void buildList() {
        list = new ArrayList<>();
        String[] split = data.split("\\s+");
        Collections.addAll(list, split);
    }

    private static void init() {
        File file = new File(DATA);
        try {
            FileReader fileReader = new FileReader(file);
            try (BufferedReader reader = new BufferedReader(fileReader)) {
                data = reader.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}

public class Day11v2 {

    private static final String DATA = "/data.txt";
    private static final String TEST = "/test.txt";

    private static final int DEEP = 75;
    private static final Map<String, long[]> CACHE = new HashMap<>();


    private static String data;
    private static List<String> list;

    public static void main(String[] args) {
        init();
        long res = part2();
        System.out.println(res);
        System.out.println("TEST: 55312");
        System.out.println("DATA: 216996");
    }

    private static long part2() {
        for (String s : list) {
            build(s, 0);
        }
        return calculate();
    }

    private static long build(String s, int deep) {
        if (deep == DEEP) return 1L;
        if (CACHE.containsKey(s)) {
            long l = CACHE.get(s)[deep];
            if (l != 0) return l;
        }
        List<String> next = getNext(s);
        long res = 0;
        for (
                String n : next) {
            res += build(n, deep + 1);
        }
        CACHE.computeIfAbsent(s, k -> new long[DEEP])[deep] = res;
        return res;
    }

    private static long calculate() {
        long res = 0;
        for (String s : list) {
            res += CACHE.get(s)[0];
        }
        return res;
    }

    private static List<String> getNext(String element) {
        if ("0".equals(element)) return List.of("1");
        else if (element.length() % 2 == 0) {
            String s1 = element.substring(0, element.length() / 2);
            String s2 = element.substring(element.length() / 2);
            return List.of("" + Long.parseLong(s1), "" + Long.parseLong(s2));
        } else {
            long value = Long.parseLong(element);
            return List.of("" + value * 2024L);
        }
    }

    private static void init() {
        File file = new File(DATA);
        try {
            FileReader fileReader = new FileReader(file);
            try (BufferedReader reader = new BufferedReader(fileReader)) {
                data = reader.readLine();
            }
            buildList();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void buildList() {
        list = new ArrayList<>();
        String[] split = data.split("\\s+");
        Collections.addAll(list, split);
    }

}

// DAY 12

public class Day12 {

    private static final String DATA = "data.txt";
    private static final String TEST = "/test1.txt";

    private static final List<Area> AREAS = new ArrayList<>();

    private static char[][] grid;
    private static boolean[][] visited;

    public static void main(String[] args) {
        init();
        part1();
        int res = calculate();
        System.out.println(res);
    }

    private static int calculate() {
        int sum = 0;
        for (Area area : AREAS) {
            sum += area.calculate();
        }
        return sum;
    }

    private static void part1() {
        for (int y = 0; y < grid.length; y++) {
            for (int x = 0; x < grid[y].length; x++) {
                if (visited[y][x]) continue;
                buildArea(y, x);
            }
        }
    }

    private static void buildArea(int y, int x) {
        Point p = new Point(y, x);
        char c = grid[y][x];
        Area area = new Area(c);
        area.add(p);
        Deque<Point> q = new ArrayDeque<>();
        q.add(p);
        while (!q.isEmpty()) {
            p = q.removeFirst();
            for (Direction d : Direction.values()) {
                Point next = new Point(p.y + d.dy, p.x + d.dx);
                if (area.add(next)) q.addLast(next);
            }
        }
        AREAS.add(area);
    }

    private static boolean inGrid(Point p) {
        return inGrid(p.y, p.x);
    }

    private static boolean inGrid(int y, int x) {
        return y > -1 && y < grid.length && x > -1 && x < grid[y].length;
    }

    private static void init() {
        try {
            List<String> strings = Files.readAllLines(Path.of(DATA));
            grid = new char[strings.size()][];
            for (int i = 0; i < strings.size(); i++) {
                grid[i] = strings.get(i).toCharArray();
            }
            visited = new boolean[grid.length][grid[0].length];
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    static class Area {
        final int ch;
        int s;
        int p;
        int angle;

        public Area(int ch) {
            this.ch = ch;
        }

        public int calculate() {
            return s * p;
        }

        public boolean add(Point point) {
            if (!inGrid(point) || point.value() != ch || point.isVisited()) return false;
            if (s == 0) {
                s = 1;
                p = 4;
                angle = 4;
            } else {
                int neighbours = countNeighbours(point);
                p += 4 - neighbours * 2;
                s++;
            }
            point.setVisited();
            return true;
        }

        private int countNeighbours(Point p) {
            int count = 0;
            for (Direction d : Direction.values()) {
                Point dp = new Point(p.y + d.dy, p.x + d.dx);
                if (inGrid(dp) && dp.value() == ch && dp.isVisited()) {
                    count++;
                }
            }
            return count;
        }

        @Override
        public String toString() {
            return String.format("Area('%s')[S:%d,P:%d]", Character.toString(ch), s, p);
        }
    }

    static class Point {
        int x;
        int y;

        public Point(int y, int x) {
            this.x = x;
            this.y = y;
        }

        public char value() {
            return grid[y][x];
        }

        public boolean isVisited() {
            return visited[y][x];
        }

        public void setVisited() {
            visited[y][x] = true;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Point point = (Point) o;
            return x == point.x && y == point.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }

        @Override
        public String toString() {
            return String.format("(%d, %d)", y, x);
        }
    }

    enum Direction {
        UP(-1, 0),
        DOWN(1, 0),
        LEFT(0, -1),
        RIGHT(0, 1);

        final int dy;
        final int dx;

        Direction(int dy, int dx) {
            this.dy = dy;
            this.dx = dx;
        }

        @Override
        public String toString() {
            return String.format("(%d, %d)", dy, dx);
        }

    }

}

